// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }
datasource db {
  provider = "mysql"
  url      = "mysql://wls:wls@localhost:3306/mydatabase"
}

generator client {
  provider = "prisma-client-js"
}

// ----AUTH---- //
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ----USERS---- //
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String?
  sessions      Session[]
  profile       Profile?
  type          UserType  @default(COSTUMER)
  typeId        String?
  costumer      Costumer?
  staff         Staff?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Costumer {
  id           String           @id @default(cuid())
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String           @unique
  appointments Appointment[]
  orders       Order[]
  transactions Transaction[]
  cart         Cart?
  projects     Project[]
  support      SupportRequest[]
}

model Staff {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bio       String?
  role      String?
  tasks     Task[]
}

enum UserType {
  ADMIN
  COSTUMER
  STAFF
}

model Profile {
  id           String        @id @default(cuid())
  userId       String        @unique // relation scalar field (used in the `@relation` attribute above)
  firstName    String
  lastName     String
  phone        String
  address      String
  city         String
  state        String
  zip          String
  country      String
  posts        Post[]
  integrations Integration[]
  company      Company?
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id          String  @id @default(cuid())
  name        String
  address     String
  city        String
  state       String
  zip         String
  country     String
  phone       String
  email       String
  website     String
  logo        String
  description String
  vat         String
  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  staff       Staff[]

  @@unique([profileId])
}

model Integration {
  id          String  @id @default(cuid())
  name        String
  description String
  type        String
  tumbnail    String
  url         String
  token       String
  secret      String
  profileId   String
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId])
}

// ----POSTS---- //
model Post {
  id         String         @id @default(cuid())
  title      String
  content    String?
  author     Profile?       @relation(fields: [authorId], references: [id])
  authorId   String?
  categories PostCategory[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  published  Boolean        @default(false)
}

model PostCategory {
  id          String  @id @default(cuid())
  name        String
  description String?
  posts       Post[]
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[]
  logo        Image     @relation(name: "BrandLogo", fields: [logoId], references: [id])
  logoId      String    @unique
}

// ----PRODUCTS---- // --- SHOP ---- //
model Product {
  id String @id @default(cuid())

  name        String /// Name
  description String? /// Desc.

  brand      Brand?  @relation(fields: [brandId], references: [id]) /// Brand
  brandId    String? /// hidden
  // Product Price Options
  storePrice String? /// Store Price
  webPrice   String? /// Web Price
  costPrice  String? /// Cost Price

  quantity String? /// Quantity
  barcode  String? @unique /// Barcode
  sku      String? /// Sku

  weight    String? /// Weight
  length    String? /// hidden
  width     String? /// hidden
  height    String? /// hidden
  unit      UNIT?   @default(PIECE) /// Unit
  published Boolean @default(false) /// Published

  soldOut  Boolean @default(false) /// hidden
  featured Boolean @default(false) /// hidden
  onStore  Boolean @default(true) /// hidden
  onWeb    Boolean @default(false) /// hidden

  createdAt        DateTime             @default(now()) /// hidden
  updatedAt        DateTime             @updatedAt /// hidden
  order            Order[] /// hidden
  category         ProductCategory[] /// Category
  subCategory      ProductSubCategory[] /// Sub Category
  supplier         Supplier[] /// Supplier
  transaction      Transaction[] /// hidden
  recipes          Recipe[] /// hidden
  cart             Cart[] /// hidden
  supplierOrders   SupplierOrder[] /// hidden
  quote            Quote[] /// hidden
  gallery          Image[] /// hidden
  image            Image?               @relation(name: "ProductImage", fields: [imageId], references: [id]) /// hidden
  imageId          String?              @unique /// hidden
  ProductVariation ProductVariation[] /// hidden
  vat              VAT                  @default(VAT_0) /// hidden
}

enum UNIT {
  PIECE
  KG
  LITER
}

//  START___FOR F F&B BUSINESSES___ SOON ___ //
model Recipe {
  id          String       @id @default(cuid())
  products    Product[]
  ingredients Ingredient[]
  amount      Int
}

model Ingredient {
  id                String          @id @default(cuid())
  name              String
  description       String?
  measurementType   MeasurementType @relation(fields: [measurementTypeId], references: [id], onDelete: Cascade)
  measurementTypeId String
  quantity          Int
  recipes           Recipe[]
}

//  END___FOR F&B BUSINESSES___ SOON ___ //

model Image {
  id             String    @id @default(cuid())
  name           String
  description    String?
  path           String // This stores a path to the image
  productGallery Product[]
  product        Product?  @relation(name: "ProductImage")
  brand          Brand?    @relation(name: "BrandLogo")
}

model ProductVariation {
  id                      String                    @id @default(cuid())
  variationId             String
  productId               String
  variation               Variation                 @relation(fields: [variationId], references: [id])
  productVariationOptions ProductVariationOptions[]
  product                 Product                   @relation(fields: [productId], references: [id])

  @@unique([productId, variationId])
}

model ProductVariationOptions {
  id          String  @id @default(cuid())
  name        String
  description String?

  storePrice String? /// number
  webPrice   String? /// number
  costPrice  String? /// number

  quantity String? /// number
  barcode  String? /// text
  sku      String? /// image

  weight            String? /// number
  length            String? /// number
  width             String? /// number
  height            String? /// number
  // image       Image?
  variation         ProductVariation @relation(fields: [variationId], references: [id])
  variationId       String
  variationOption   VariationOptions @relation(fields: [variationOptionId], references: [id])
  variationOptionId String
}

model Variation {
  id               String             @id @default(cuid())
  name             String
  description      String?
  variationOptions VariationOptions[]
  productVariation ProductVariation[]
}

model VariationOptions {
  id                      String                    @id @default(cuid())
  name                    String
  variation               Variation                 @relation(fields: [variationId], references: [id])
  variationId             String
  productVariationOptions ProductVariationOptions[]
}

model ProductCategory {
  id            String               @id @default(cuid())
  name          String
  description   String?
  product       Product[]
  subCategories ProductSubCategory[]
  type          ProductType[]
}

model ProductSubCategory {
  id          String            @id @default(cuid())
  name        String
  description String?
  category    ProductCategory[]
  products    Product[]
}

model ProductType {
  id          String            @id @default(cuid())
  name        String
  description String?
  category    ProductCategory[]
}

model Supplier {
  id          String          @id @default(cuid())
  name        String
  description String?
  products    Product[]
  address     String?
  city        String?
  state       String?
  zip         String?
  country     String?
  phone       String?
  email       String
  website     String?
  logo        String?
  orders      SupplierOrder[]
}

model MeasurementType {
  id          String       @id @default(cuid())
  name        String
  type        String
  ingredients Ingredient[]
}

//   ---- POS ---- //
// model Vat {
//   id           String        @id @default(cuid())
//   name         String
//   description  String
//   rate         String
//   transactions Transaction[]
//   orders       Order[]
// }
enum VAT {
  VAT_0
  VAT_10
  VAT_27
}

enum PaymentType {
  CASH
  CARD
  TRANSFER
}

model Payment {
  id           String        @id @default(cuid())
  paymentId    String
  customerId   String
  type         PaymentType
  transactions Transaction[]
  orders       Order[]
}

model Transaction {
  id         String    @id @default(cuid())
  total      Int
  netTotal   Int
  totalVat   Int
  products   Product[]
  Vat        VAT       @default(VAT_0)
  vatId      String
  costumer   Costumer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  payment    Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Order {
  id         String      @id @default(cuid())
  total      Int
  netTotal   Int
  totalVat   Int
  shipping   Shipping?   @relation(fields: [shippingId], references: [id], onDelete: Cascade)
  products   Product[]
  payment    Payment     @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  Vat        VAT         @default(VAT_0)
  costumer   Costumer?   @relation(fields: [costumerId], references: [id], onDelete: Cascade)
  status     OrderStatus @default(PENDING)
  paymentId  String
  costumerId String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  shippingId String?
  note       String?
}

model Shipping {
  id          String  @id @default(cuid())
  name        String
  description String?
  fee         Int
  data        Json?
  orders      Order[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum SupplierOrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Appointment {
  id          String    @id @default(cuid())
  title       String
  description String?
  start       DateTime
  end         DateTime
  costumer    Costumer? @relation(fields: [costumerId], references: [id], onDelete: Cascade)
  costumerId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id         String    @id @default(cuid())
  products   Product[]
  total      String
  costumer   Costumer? @relation(fields: [costumerId], references: [id], onDelete: Cascade)
  costumerId String?   @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

// ---- STOCK ---- //
model SupplierOrder {
  id         String              @id @default(cuid())
  products   Product[]
  total      String
  supplier   Supplier            @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId String
  status     SupplierOrderStatus @default(PENDING)
  statusId   String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
}

// ---- PROJECT MANAGEMENT ---- //
model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  tasks       Task[]
  contracts   Contracts[]
  invoices    Invoices[]
  costumer    Costumer?   @relation(fields: [costumerId], references: [id], onDelete: Cascade)
  costumerId  String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Task {
  id           String          @id @default(cuid())
  name         String
  description  String?
  todos        Todos[]
  project      Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId    String
  assignedTo   Staff?          @relation(fields: [assignedToId], references: [id], onDelete: Cascade)
  assignedToId String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  attachments  Attachment[]
  status       TaskStatus      @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId     String
  request      SupportRequest?
}

model TaskStatus {
  id          String  @id @default(cuid())
  name        String
  description String?
  tasks       Task[]
}

model TodoStatus {
  id          String  @id @default(cuid())
  name        String
  description String?
  todos       Todos[]
}

model Todos {
  id          String     @id @default(cuid())
  name        String
  description String?
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  status      TodoStatus @relation(fields: [statusId], references: [id], onDelete: Cascade)
  statusId    String
}

model Attachment {
  id        String         @id @default(cuid())
  name      String
  data      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  task      Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  type      AttachmentType @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId    String
}

model AttachmentType {
  id          String       @id @default(cuid())
  name        String
  description String?
  attachments Attachment[]
}

model Contracts {
  id          String   @id @default(cuid())
  name        String
  description String?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoices {
  id          String   @id @default(cuid())
  name        String
  description String?
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//  --- CRM --- //
model Lead {
  id    String @id @default(cuid())
  name  String
  email String
  phone String
}

model Quote {
  id       String    @id @default(cuid())
  name     String
  email    String
  phone    String
  message  String
  products Product[]
}

model ContactForm {
  id      String @id @default(cuid())
  name    String
  email   String
  phone   String
  message String
}

model SupportRequest {
  id          String    @id @default(cuid())
  name        String
  description String?
  costumer    Costumer? @relation(fields: [costumerId], references: [id], onDelete: Cascade)
  costumerId  String?
  Task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      String?   @unique
}
